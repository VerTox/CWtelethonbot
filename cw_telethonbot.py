#!/usr/bin/python3
# coding=utf-8
import _thread
import configparser
import json
import socks
import os
import random
import re
import sys
from collections import deque
from configparser import ConfigParser
from datetime import datetime
from getopt import getopt
from time import time, sleep
import pytz
import telethon
from telethon import events

# region –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ 1
# —á–∏—Ç–∞–µ–º/—Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
need2readconfig = True
# –∏–º—è –∑–∞–º–∫–∞
castle_name = 'night'
# –≤–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫–∞—á–∫—É –ø—Ä–∏ –ª–µ–≤–µ–ª–∞–ø–µ
lvl_up = 'lvl_off'
# —Å–∫–æ–ª—å–∫–æ –≥–æ–ª–¥—ã –æ—Å—Ç–∞–≤–ª—è—Ç—å –Ω–∞ —Ä—É–∫–∞—Ö –ø–æ—Å–ª–µ –∞–≤—Ç–æ–¥–æ–Ω–∞—Ç–∞
gold_to_left = 0
# username –∏–≥—Ä–æ–≤–æ–≥–æ –±–æ—Ç–∞
bot_username = 'ChatWarsBot'
# username –±–æ—Ç–∞ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
stat_bot = 'CWCastleBot'
# —Ç—Ä–µ–π–¥–æ–±–æ—Ç
trade_bot = 'ChatWarsTradeBot'
# —Å—Ç–æ–∫–æ–±–æ—Ç –ö–∞–ø–∏–±–∞—Ä–∞
stock_bot = 'ChatWarsStock_bot'
# –≥—Ä—É–ø–ø–∞, –∫—É–¥–∞ —Å–∫–∏–¥—ã–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ #–∑–∞–ø—Ä–æ—Å—ã –∞–¥–º–∏–Ω–∞
group_name = ''
# username –∞–¥–º–∏–Ω–∞
admin_username = ''

my_username = ''

resource_id_list = []

# endregion 1

# region –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ –∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤

# pathname = os.path.dirname(sys.argv[0])
# fullpath = os.path.abspath(pathname)
# configpath = fullpath + '/bot_cfg/'
configpath = ''
config = configparser.ConfigParser()

opts, args = getopt(sys.argv[1:], 'a:o:g:l:n:u:', ['admin=', 'order=', 'gold=', 'lvlup=', 'group_name=', 'username='])

for opt, arg in opts:
    if opt in ('-a', '--admin'):
        admin_username = arg
    elif opt in ('-o', '--order'):
        order_usernames = arg.split(',')
    elif opt in ('-g', '--gold'):
        gold_to_left = int(arg)
    elif opt in ('-l', '--lvlup'):
        lvl_up = arg
    elif opt in ('-n', '--group_name'):
        group_name = arg
    elif opt in ('-u', '--username'):
        my_username = arg
# endregion

# region –ö–æ–Ω—Ñ–∏–≥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –¢–µ–ª–µ–≥–µ
CONFIG_PATH = my_username + '_tg_connect.json'
with open(CONFIG_PATH) as f:
    CONFIG = json.load(f)
# endregion

# region –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ 2 (—Å–ª–æ–≤–∞—Ä–∏)
orders = {
    'turtles': 'üê¢',
    'klever': '‚òòÔ∏è',
    'rock': 'üñ§',
    'farm': 'üçÜ',
    'fall': 'üçÅ',
    'rose': 'üåπ',
    'night': 'ü¶á',
    'lesnoi_fort': 'üå≤–õ–µ—Å–Ω–æ–π —Ñ–æ—Ä—Ç',
    'les': 'üå≤–õ–µ—Å',
    'gorni_fort': '‚õ∞–ì–æ—Ä–Ω—ã–π —Ñ–æ—Ä—Ç',
    'morskoi_fort': '‚öì–ú–æ—Ä—Å–∫–æ–π —Ñ–æ—Ä—Ç',
    'gora': '‚õ∞',
    'cover': 'üõ°–ó–∞—â–∏—Ç–∞',
    'attack': '‚öî–ê—Ç–∞–∫–∞',
    'cover_symbol': 'üõ°',
    'hero': 'üèÖ–ì–µ—Ä–æ–π',
    'corovan': '/go',
    'peshera': 'üï∏–ü–µ—â–µ—Ä–∞',
    'quests': 'üó∫–ö–≤–µ—Å—Ç—ã',
    'castle_menu': 'üè∞–ó–∞–º–æ–∫',
    'lavka': 'üèö–õ–∞–≤–∫–∞',
    'snaraga': '–°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ',
    'shlem': '–®–ª–µ–º',
    'sell': '–°–∫—É–ø–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤',
    'lvl_def': '+1 üõ°–ó–∞—â–∏—Ç–∞',
    'lvl_atk': '+1 ‚öî–ê—Ç–∞–∫–∞',
    'lvl_off': '–í—ã–∫–ª—é—á–µ–Ω',
    'more': 'üèù–ü–æ–±–µ—Ä–µ–∂—å–µ',
    'pet_play': '‚öΩ–ü–æ–∏–≥—Ä–∞—Ç—å',
    'pet_feed': 'üçº–ü–æ–∫–æ—Ä–º–∏—Ç—å',
    'pet_wash': 'üõÅ–ü–æ—á–∏—Å—Ç–∏—Ç—å',
    'attack_symbol': '‚öî'
}

builds = {
    'stash': '/build_stash',
    'sentries': '/build_sentries',
    'monument': '/build_monument',
    'warriors': '/build_warriors',
    'teaparty': '/build_teaparty',
    'hq': '/build_hq',
    'gladiators': '/build_gladiators',
    'wall': '/build_wall',
    'ambar': '/build_ambar',
    'repair_stash': '/repair_stash',
    'repair_sentries': '/repair_sentries',
    'repair_monument': '/repair_monument',
    'repair_warriors': '/repair_warriors',
    'repair_teaparty': '/repair_teaparty',
    'repair_hq': '/repair_hq',
    'repair_gladiators': '/repair_gladiators',
    'repair_wall': '/repair_wall',
    'repair_ambar': '/repair_ambar',
    'repair_goldrewards2': '/repair_goldrewards2'
}

flags = {
    'üçÅ': 'fall',
    'üê¢': 'turtles',
    '‚òòÔ∏è': 'klever',
    'üçÜ': 'farm',
    'üñ§': 'rock',
    'ü¶á': 'night',
    'üåπ': 'rose',
}

pet_states = {
    'üòÅ': 'perfect',
    'üòÉ': 'good',
    'üòê': 'med',
    'üò¢': 'bad'
}

pet_char_states = {
    '–æ—Ç–ª–∏—á–Ω–æ!': 5,
    '—Ö–æ—Ä–æ—à–æ': 4,
    '—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ': 3,
    '–ø–ª–æ—Ö–æ': 2,
    '–æ—á–µ–Ω—å –ø–ª–æ—Ö–æ': 1
}

arena_cover = ['üõ°–≥–æ–ª–æ–≤—ã', 'üõ°–∫–æ—Ä–ø—É—Å–∞', 'üõ°–Ω–æ–≥']
arena_attack = ['üó°–≤ –≥–æ–ª–æ–≤—É', 'üó°–ø–æ –∫–æ—Ä–ø—É—Å—É', 'üó°–ø–æ –Ω–æ–≥–∞–º']

# –Ω–∏—á–æ –Ω–µ –º–µ–Ω—è—Ç—å, –≤—Å–µ –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç—Å—è —Å–∞–º–æ
castle = orders['night']
# —Ç–µ–∫—É—â–∏–π –ø—Ä–∏–∫–∞–∑ –Ω–∞ –∞—Ç–∞–∫—É/–∑–∞—â–∏—Ç—É, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ–≥–¥–∞ –∑–∞—â–∏—Ç–∞, —Ç—Ä–æ–≥–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
current_order = {'time': 0, 'order': castle}

# –∑–∞–¥–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞: –∞–¥–º–∏–Ω –∏–ª–∏ –≥—Ä—É–ø–ø–∞
if group_name == '':
    pref = '@'
    msg_receiver = admin_username
else:
    pref = ''
    msg_receiver = group_name

action_list = deque([])
log_list = deque([], maxlen=30)
lt_arena = 0
get_info_diff = 360
hero_message_id = 0
report_message_id = 0
last_captcha_id = 0
last_pet_play = 0

bot_enabled = True
arena_enabled = False
les_enabled = True
peshera_enabled = False
more_enabled = False
corovan_enabled = True
order_enabled = True
auto_def_enabled = True
donate_enabled = False
quest_fight_enabled = True
build_enabled = False
build_target = '/repair_wall'
castle_gold = 1
secondstock_enabled = False
twinkstock_enabled = False
trade_active = False
report = False
arenafight = re.search('–ü–æ–µ–¥–∏–Ω–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è (\d+) –∏–∑ (\d+)', '–ü–æ–µ–¥–∏–Ω–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è 0 –∏–∑ 0')
victory = 0
gold = 0
endurance = 0
level = 0
class_available = False

arena_change_enabled = False
arena_item_id = 0
non_arena_item_id = 0

arena_running = False
arena_delay = False
arena_delay_day = -1
tz = pytz.timezone('Europe/Moscow')


# endregion (ckjdfhb)


def connect(username, api, tghash):
    global client

    log('Connecting to telegram...')
    client = telethon.TelegramClient(username, api, tghash,
                                     #                                 connection_mode=telethon.ConnectionMode.TCP_FULL,
                                     timeout=86400,
                                     #                                 proxy=(socks.SOCKS5, 'de51.fri-gate0.biz', 1080),
                                     update_workers=1, spawn_read_thread=False)
    # client = telethon.TelegramClient(username, api, tghash)
    # proxy (`tuple` | `dict`, optional):
    #             A tuple consisting of ``(socks.SOCKS5, 'host', port)``.
    #             See https://github.com/Anorov/PySocks#usage-1 for more.
    #
    #     TCP_FULL: Default Telegram mode. Sends 12 additional bytes and
    #               needs to calculate the CRC value of the packet itself.
    #
    #     TCP_INTERMEDIATE: Intermediate mode between TCP_FULL and TCP_ABRIDGED.
    #                       Always sends 4 extra bytes for the packet length.
    #
    #     TCP_ABRIDGED: This is the mode with the lowest overhead, as it will
    #                   only require 1 byte if the packet length is less than
    #                   508 bytes (127 << 2, which is very common).
    #
    #     TCP_OBFUSCATED: Encodes the packet just like TCP_ABRIDGED, but encrypts
    #                     every message with a randomly generated key using the
    #                     AES-CTR mode so the packets are harder to discern.
    #     """

    client.start()
    log('Connected to telegram.')


def queue_worker():
    global get_info_diff
    global lt_info
    global arena_delay
    global arena_delay_day
    global tz
    lt_info = 0

    while True:
        try:
            if time() - lt_info > get_info_diff:
                if arena_delay and arena_delay_day != datetime.now(tz).day:
                    arena_delay = False
                lt_info = time()
                curhour = datetime.now(tz).hour
                if 9 <= curhour <= 23:
                    get_info_diff = random.randint(420, 900)
                else:
                    get_info_diff = random.randint(600, 900)
                if bot_enabled:
                    action_list.append(orders['hero'])
                    if castle_gold == 0:
                        action_list.append(orders['castle_menu'])
                continue
            if len(action_list):
                log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º ' + action_list[0])
                client.send_message(bot_username, action_list.popleft())
            sleep_time = random.randint(5, 10)
            # log("Pause {0} sec".format(sleep_time))
            sleep(sleep_time)
        except Exception as err:
            log('–û—à–∏–±–∫–∞ –æ—á–µ—Ä–µ–¥–∏: {0}'.format(err))


# —á–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥_—Ñ–∞–π–ª.cfg
def read_config():
    global config
    global my_username
    global bot_enabled
    global arena_enabled
    global les_enabled
    global peshera_enabled
    global more_enabled
    global corovan_enabled
    global auto_def_enabled
    global donate_enabled
    global lvl_up
    global quest_fight_enabled
    global build_enabled
    global build_target
    global arena_change_enabled
    global arena_item_id
    global non_arena_item_id
    # global firststock_enabled
    global secondstock_enabled
    section = str(my_username)
    bot_enabled = config.getboolean(section, 'bot_enabled') \
        if config.has_option(section, 'bot_enabled') else bot_enabled
    arena_enabled = config.getboolean(section, 'arena_enabled') \
        if config.has_option(section, 'arena_enabled') else arena_enabled
    les_enabled = config.getboolean(section, 'les_enabled') \
        if config.has_option(section, 'les_enabled') else les_enabled
    peshera_enabled = config.getboolean(section, 'peshera_enabled') \
        if config.has_option(section, 'peshera_enabled') else peshera_enabled
    more_enabled = config.getboolean(section, 'more_enabled') \
        if config.has_option(section, 'more_enabled') else more_enabled
    corovan_enabled = config.getboolean(section, 'corovan_enabled') \
        if config.has_option(section, 'corovan_enabled') else corovan_enabled
    auto_def_enabled = config.getboolean(section, 'auto_def_enabled') \
        if config.has_option(section, 'auto_def_enabled') else auto_def_enabled
    donate_enabled = config.getboolean(section, 'donate_enabled') \
        if config.has_option(section, 'donate_enabled') else donate_enabled
    lvl_up = config.get(section, 'lvl_up') \
        if config.has_option(section, 'lvl_up') else lvl_up
    quest_fight_enabled = config.getboolean(section, 'quest_fight_enabled') \
        if config.has_option(section, 'quest_fight_enabled') else quest_fight_enabled
    build_enabled = config.getboolean(section, 'build_enabled') \
        if config.has_option(section, 'build_enabled') else build_enabled
    build_target = config.get(section, 'build_target') \
        if config.has_option(section, 'build_target') else build_target
    arena_change_enabled = config.getboolean(section, 'arena_change_enabled') \
        if config.has_option(section, 'arena_change_enabled') else arena_change_enabled
    arena_item_id = config.get(section, 'arena_item_id') \
        if config.has_option(section, 'arena_item_id') else arena_item_id
    non_arena_item_id = config.get(section, 'non_arena_item_id') \
        if config.has_option(section, 'non_arena_item_id') else non_arena_item_id
    # firststock_enabled = config.getboolean(section, 'firststock_enabled') \
    #     if config.has_option(section, 'firststock_enabled') else firststock_enabled
    secondstock_enabled = config.getboolean(section, 'secondstock_enabled') \
        if config.has_option(section, 'secondstock_enabled') else secondstock_enabled


# —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥_—Ñ–∞–π–ª.cfg
def write_config():
    global config
    global my_username
    global bot_enabled
    global arena_enabled
    global les_enabled
    global peshera_enabled
    global more_enabled
    global corovan_enabled
    global auto_def_enabled
    global donate_enabled
    global lvl_up
    global quest_fight_enabled
    global build_enabled
    global build_target
    global arena_change_enabled
    # global firststock_enabled
    global secondstock_enabled
    section = str(my_username)
    if config.has_section(section):
        config.remove_section(section)
    config.add_section(section)
    config.set(section, 'bot_enabled', str(bot_enabled))
    config.set(section, 'arena_enabled', str(arena_enabled))
    config.set(section, 'arena_change_enabled', str(arena_change_enabled))
    config.set(section, 'arena_item_id', str(arena_item_id))
    config.set(section, 'non_arena_item_id', str(non_arena_item_id))
    config.set(section, 'les_enabled', str(les_enabled))
    config.set(section, 'peshera_enabled', str(peshera_enabled))
    config.set(section, 'more_enabled', str(more_enabled))
    config.set(section, 'corovan_enabled', str(corovan_enabled))
    config.set(section, 'auto_def_enabled', str(auto_def_enabled))
    config.set(section, 'donate_enabled', str(donate_enabled))
    config.set(section, 'lvl_up', str(lvl_up))
    config.set(section, 'quest_fight_enabled', str(quest_fight_enabled))
    config.set(section, 'build_enabled', str(build_enabled))
    config.set(section, 'build_target', str(build_target))
    # config.set(section, 'firststock_enabled', str(firststock_enabled))
    config.set(section, 'secondstock_enabled', str(secondstock_enabled))
    with open(configpath + str(my_username) + '.cfg', 'w+') as configfile:
        config.write(configfile)


def parse_text(text, username, message_id, sender):
    global lt_arena
    global hero_message_id
    global bot_enabled
    global arena_enabled
    global les_enabled
    global peshera_enabled
    global more_enabled
    global corovan_enabled
    global order_enabled
    global auto_def_enabled
    global donate_enabled
    global last_captcha_id
    global arena_delay
    global arena_delay_day
    global tz
    global arena_running
    global lvl_up
    global pref
    global msg_receiver
    global quest_fight_enabled
    global build_enabled
    global build_target
    global twinkstock_enabled
    global resource_id_list
    global report
    global gold
    global inv
    global endurance
    global endurancetop
    global state
    global victory
    global arenafight
    global get_info_diff
    global lt_info
    global time_to_war
    global castle_name
    global castle
    global level
    global class_available
    global last_pet_play
    global arena_change_enabled
    global arena_item_id
    global non_arena_item_id
    global trade_active
    global report_message_id
    global secondstock_enabled
    global castle_gold

    if bot_enabled and username == bot_username:
        log('–ü–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è')

        if text.find('üåü–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!') != -1 and lvl_up != 'lvl_off':
            log('–ø–æ–ª—É—á–∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å - {0}'.format(orders[lvl_up]))
            action_list.append('/level_up')
            action_list.append(orders[lvl_up])

        elif "–ù–∞ –≤—ã—Ö–æ–¥–µ –∏–∑ –∑–∞–º–∫–∞ –æ—Ö—Ä–∞–Ω–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç" in text:
            action_list.clear()
            bot_enabled = False
            last_captcha_id = message_id
            fwd('@', admin_username, message_id, sender)

        elif '–ù–µ —É–º–Ω–∏—á–∞–π!' in text or '–¢—ã –¥–æ–ª–≥–æ –¥—É–º–∞–ª, –∞–∂ –≤—Å–ø–æ—Ç–µ–ª –æ—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è' in text or "–≤ —Ç–µ—Ä–º–∞—Ö" in text:
            action_list.clear()
            bot_enabled = False
            last_captcha_id = message_id
            fwd('@', admin_username, message_id, sender)

        elif '–ù–∞ —Å–µ–≥–æ–¥–Ω—è —Ç—ã —É–∂–µ —Å–≤–æ—ë –æ—Ç–≤–æ–µ–≤–∞–ª. –ü—Ä–∏—Ö–æ–¥–∏ –∑–∞–≤—Ç—Ä–∞.' in text:
            arena_delay = True
            arena_delay_day = datetime.now(tz).day
            log("–û—Ç–¥—ã—Ö–∞–µ–º –¥–µ–Ω–µ–∫ –æ—Ç –∞—Ä–µ–Ω—ã")
            arena_running = False

        elif '–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è —Å–æ —Å—Ç—Ä–æ–π–∫–∏:' in text:
            log("–ü–æ—Å—Ç—Ä–æ–∏–ª–∏, —Å–æ–æ–±—â–∞–µ–º –ª–µ–≥–∞—Ç—É")
            fwd('@', stat_bot, message_id, sender)

        elif '–ó–¥–∞–Ω–∏–µ –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ:' in text:
            log("–û—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–ª–∏, —Å–æ–æ–±—â–∞–µ–º –ª–µ–≥–∞—Ç—É")
            fwd('@', stat_bot, message_id, sender)

        elif '–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–æ—é:' in text:
            log("–ü–æ–≤–æ–µ–≤–∞–ª–∏, —Å–æ–æ–±—â–∞–µ–º –ª–µ–≥–∞—Ç—É")
            fwd('@', stat_bot, message_id, sender)
            report_message_id = message_id

        elif '–¢—ã –∑–∞–¥–µ—Ä–∂–∞–ª' in text:
            fwd('@', stat_bot, message_id, sender)

        elif '–¢—ã —É–ø—É—Å—Ç–∏–ª' in text:
            fwd('@', stat_bot, message_id, sender)

        elif '–ó–∞–∫—É–ø–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞:' in text:
            buytrade = re.search('–æ–±–æ–π–¥–µ—Ç—Å—è –ø—Ä–∏–º–µ—Ä–Ω–æ –≤ ([0-9]+)üí∞', text).group(1)
            gold -= int(buytrade)
            log('–ö—É–ø–∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–∞ –±–∏—Ä–∂–µ –Ω–∞ {0} –∑–æ–ª–æ—Ç–∞'.format(buytrade))

        elif '–¢—ã –ø–æ—à–µ–ª —Å—Ç—Ä–æ–∏—Ç—å:' in text:
            log("–£—à–ª–∏ —Å—Ç—Ä–æ–∏—Ç—å")
            lt_info = time()
            get_info_diff = random.randint(400, 500)

        elif '–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –∏—Å–∫–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ –ø–µ—â–µ—Ä—É' in text:
            log("–£—à–ª–∏ –≤ –ø–µ—â–µ—Ä—É")
            lt_info = time()
            get_info_diff = random.randint(400, 500)
            endurance -= 2

        elif '–¢—ã –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è –∏—Å–∫–∞—Ç—å –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –≤ –ª–µ—Å' in text:
            log("–£—à–ª–∏ –≤ –ª–µ—Å")
            lt_info = time()
            get_info_diff = random.randint(400, 500)
            endurance -= 1

        elif '–ò—â–µ–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞. –ü–æ–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' in text:
            lt_info = time()
            get_info_diff = random.randint(900, 1200)
            gold -= 5

        elif '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –∞—Ä–µ–Ω—É!' in text:
            # victory = re.search('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥: (\d+)', text).group(1)
            arenafight = re.search('–ü–æ–µ–¥–∏–Ω–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: (\d+)/(\d+)', text)
            log('–ü–æ–µ–¥–∏–Ω–∫–æ–≤: {0} / {1}.'.format(arenafight.group(1), arenafight.group(2)))
            if arenafight.group(1) == arenafight.group(2):
                arena_delay = True
                arena_delay_day = datetime.now(tz).day
                log("–û—Ç–¥—ã—Ö–∞–µ–º –¥–µ–Ω–µ–∫ –æ—Ç –∞—Ä–µ–Ω—ã")
                arena_running = False
                sleep(random.randint(5, 15))
                action_list.append('‚¨ÖÔ∏è–ù–∞–∑–∞–¥')
            if arena_enabled and not arena_delay and gold >= 5 and not arena_running:
                log('–í–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ - –∞—Ä–µ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞')
                if arena_change_enabled:
                    action_list.append('/on_{0}'.format(arena_item_id))
                arena_running = True
                action_list.append('‚ñ∂Ô∏è–ë—ã—Å—Ç—Ä—ã–π –±–æ–π')
                log('–¢–æ–ø–∞–µ–º –Ω–∞ –∞—Ä–µ–Ω—É')

        elif '–í –∫–∞–∑–Ω–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ' in text:
            log("–°—Ç—Ä–æ–π–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤ –∑–∞–º–∫–µ –Ω–µ—Ç –¥–µ–Ω–µ–≥")
            castle_gold = 0

        elif corovan_enabled and text.find(' /go') != -1:
            action_list.append(orders['corovan'])

        elif '–¥–æ–≤–æ–ª–µ–Ω.' in text:
            log('–ü–æ–∏–≥—Ä–∞–ª–∏ —Å –ø–∏—Ç–æ–º—Ü–µ–º')
            last_pet_play = round(time())

        elif text.find('–ó–∞–ø–∞—Å –µ–¥—ã:') != -1:
            play_state = pet_char_states[re.search('‚öΩ (.+)', text).group(1)]
            food_state = pet_char_states[re.search('üçº (.+)', text).group(1)]
            wash_state = pet_char_states[re.search('üõÅ (.+)', text).group(1)]
            food_rest = int(re.search('–ó–∞–ø–∞—Å –µ–¥—ã: (\d+)', text).group(1))
            log('‚öΩÔ∏è{0} üçº{1} üõÅ{2} –ó–∞–ø–∞—Å –µ–¥—ã {3}'.format(play_state, food_state, wash_state, food_rest))
            if food_rest <= 2:
                send_msg('@', admin_username, '–ï–¥—ã –ø–∏—Ç–æ–º—Ü—É –º–∞–ª–æ–≤–∞—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å. –í—Å–µ–≥–æ {0}'.format(food_rest))
            if play_state <= 4 and round(time()) - last_pet_play >= 3600:
                action_list.append(orders['pet_play'])
            if food_state <= 3 and food_rest != 0:
                action_list.append(orders['pet_feed'])
            if wash_state <= 4:
                action_list.append(orders['pet_wash'])

        elif text.find('–ë–∏—Ç–≤–∞ —Å–µ–º–∏ –∑–∞–º–∫–æ–≤ —á–µ—Ä–µ–∑') != -1:
            if castle_name is None:
                castle_name = flags[re.search('(.{2}).*, .+ –∑–∞–º–∫–∞', text).group(1)]
                log('–ó–∞–º–æ–∫: ' + castle_name)
                castle = orders[castle_name]
            class_available = bool(re.search('–û–ø—Ä–µ–¥–µ–ª–∏—Å—å —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π', text))
            hero_message_id = {'id': message_id, 'text:': text}
            endurance = int(re.search('–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: (\d+)', text).group(1))
            endurancetop = int(re.search('–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: (\d+)/(\d+)', text).group(2))
            gold = int(re.search('üí∞(-?[0-9]+)', text).group(1))
            inv = re.search('üéí–†—é–∫–∑–∞–∫: ([0-9]+)/([0-9]+)', text)
            level = int(re.search('üèÖ–£—Ä–æ–≤–µ–Ω—å: (\d+)', text).group(1))
            log('–£—Ä–æ–≤–µ–Ω—å: {0}, –∑–æ–ª–æ—Ç–æ: {1}, –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {2} / {3}, –†—é–∫–∑–∞–∫: {4} / {5}'.format(level, gold, endurance,
                                                                                               endurancetop,
                                                                                               inv.group(1),
                                                                                               inv.group(2)))
            pet_state = 'no_pet'
            if re.search('–ü–æ–º–æ—â–Ω–∏–∫:', text) is not None:
                # –∂–µ–≤–æ—Ç–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ
                pet_state = pet_states[re.search('–ü–æ–º–æ—â–Ω–∏–∫:\n.+\(.+\) (.+) /pet', text).group(1)]
            m = re.search('–ë–∏—Ç–≤–∞ —Å–µ–º–∏ –∑–∞–º–∫–æ–≤ —á–µ—Ä–µ–∑ (?:(?:(\d+)—á.)? ?(?:(\d+) –º–∏–Ω)?|–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)', text)
            log(str(m.group(1)))
            log(str(m.group(2)))
            if not m and re.search('–ú–µ–∂—Å–µ–∑–æ–Ω—å–µ', text):
                m = re.search('–ë–∏—Ç–≤–∞ —Å–µ–º–∏ –∑–∞–º–∫–æ–≤ —á–µ—Ä–µ–∑ (?:(?:(\d+)—á.)? ?(?:(\d+) –º–∏–Ω)?|–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥)',
                              '–ë–∏—Ç–≤–∞ —Å–µ–º–∏ –∑–∞–º–∫–æ–≤ —á–µ—Ä–µ–∑ 10000—á. 100 –º–∏–Ω—É—Ç')
            if not m.group(1):
                if m.group(2) and int(m.group(2)) <= 29:
                    report = True
                    state = re.search('–°–æ—Å—Ç–æ—è–Ω–∏–µ:\n(.*)', text).group(1)
                    if auto_def_enabled and time() - current_order['time'] > 900:
                        if '–û—Ç–¥—ã—Ö' in state:
                            fwd('@', stat_bot, hero_message_id['id'], sender)
                            log("–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ª–µ–≥–∞—Ç—É")
                            if donate_enabled and gold > gold_to_left:
                                log('–î–æ–Ω–∞—Ç {0} –∑–æ–ª–æ—Ç–∞ –≤ –∫–∞–∑–Ω—É –∑–∞–º–∫–∞'.format(gold - gold_to_left))
                                action_list.append('/donate {0}'.format(gold - gold_to_left))
                                gold -= gold_to_left
                            update_order(castle)
                        elif "–ù–∞ –∞—Ä–µ–Ω–µ" in state:
                            log("–°–∫–æ—Ä–æ –±–æ–π. –£—Ö–æ–¥–∏–º —Å –∞—Ä–µ–Ω—ã ")
                            action_list.append('‚úñÔ∏è–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫')
                            log('–í—ã–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ - –∞—Ä–µ–Ω–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å')
                            arena_running = False
                            action_list.append(orders['hero'])
                    return
                else:
                    # –µ—Å–ª–∏ –±–∏—Ç–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
                    report = True
                    return
            time_to_war = int(m.group(1) if m.group(1) else 0) * 60 + int(m.group(2) if m.group(2) else 0)
            log('–í—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –î–æ –±–æ—è –æ—Å—Ç–∞–ª–æ—Å—å {0} –º–∏–Ω—É—Ç'.format(time_to_war))
            if report:
                action_list.append('/report')
                sleep(random.randint(3, 6))
                log('–∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Ä–µ–ø–æ—Ä—Ç –ø–æ –±–∏—Ç–≤–µ')
                report = False
            if text.find('üõå–û—Ç–¥—ã—Ö') == -1 and text.find('üõ°–ó–∞—â–∏—Ç–∞ ') == -1:
                log('–ß–µ–º-—Ç–æ –∑–∞–Ω—è—Ç, –∂–¥—ë–º')
            else:
                # –ü–æ–¥—É–º–∞–µ–º, –∞ –Ω–∞–¥–æ –ª–∏ —Ç–∞–∫ —á–∞—Å—Ç–æ —Ö–æ–¥–∏—Ç—å –∫—É–¥–∞ –Ω–∏–±—É–¥—å )
                if not build_enabled:
                    log('–Ω–∞ —Å—Ç—Ä–æ–π–∫—É –Ω–∞–º –Ω–µ –Ω—É–∂–Ω–æ')
                    curhour = datetime.now(tz).hour
                    if not arena_enabled or arena_delay or curhour > 23 or curhour < 8:
                        log('–Ω–∞ –∞—Ä–µ–Ω—É —Ç–æ–∂–µ –Ω–µ –Ω—É–∂–Ω–æ')
                        if int(endurancetop) - int(endurance) >= 8:
                            # –º–∏–Ω—É—Ç –∑–∞ 35-45 –¥–æ –±–∏—Ç–≤—ã –∏–º–µ–µ—Ç —Å–º—ã—Å–ª –≤—ã–π—Ç–∏ –∏–∑ —Å–ø—è—á–∫–∏
                            sleeping = time_to_war * 60 - 60 * random.randint(35, 45)
                            log('–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ –º–∞–ª–æ, –º–æ–∂–Ω–æ –∏ –ø–æ–¥—Ä–µ–º–∞—Ç—å –¥–æ –±–æ—è {0} –º–∏–Ω—É—Ç'.format(int(sleeping / 60)))
                            lt_info = time()
                            get_info_diff = sleeping
                            return
                    elif gold < 5 and endurance == 0 and time_to_war > 60:
                        sleeping = 60 * random.randint(30, 40)
                        log('–≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏ –Ω–µ—Ç, –¥–µ–Ω–µ–≥ –Ω–µ—Ç, –º–æ–∂–Ω–æ –∏ –ø–æ–¥—Ä–µ–º–∞—Ç—å –¥–æ –±–æ—è {0} –º–∏–Ω—É—Ç'.format(
                            int(sleeping / 60)))
                        lt_info = time()
                        get_info_diff = sleeping

                if text.find('üõå–û—Ç–¥—ã—Ö') != -1 and arena_running:
                    arena_running = False

                if re.search('–ü–æ–º–æ—â–Ω–∏–∫:', text) is not None and pet_state == 'med' or pet_state == 'bad':
                    log('–ò–¥–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞')
                    action_list.append('/pet')

                elif peshera_enabled and endurance >= 2 and level >= 7:
                    if les_enabled:
                        action_list.append(orders['quests'])
                        action_list.append(random.choice([orders['peshera'], orders['les']]))
                    else:
                        action_list.append(orders['quests'])
                        action_list.append(orders['peshera'])

                elif les_enabled and not peshera_enabled and endurance >= 1 and orders['les'] not in action_list:
                    action_list.append(orders['quests'])
                    action_list.append(orders['les'])

                elif more_enabled and not les_enabled and not peshera_enabled and endurance >= 1 and \
                                orders['more'] not in action_list:
                    action_list.append(orders['quests'])
                    action_list.append(orders['more'])

                elif arena_enabled and not arena_delay and gold >= 5 and not arena_running and level >= 5:
                    curhour = datetime.now(tz).hour
                    if 9 <= curhour <= 23:
                        action_list.append(orders['quests'])
                        action_list.append('üìØ–ê—Ä–µ–Ω–∞')
                    else:
                        log('–ü–æ —á–∞—Å–∞–º –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–º –Ω–∞ –∞—Ä–µ–Ω—É. –°–µ–π—á–∞—Å ' + str(curhour) + ' —á–∞—Å–æ–≤')
                        if build_enabled and castle_gold > 0 and level >= 10:
                            log('–ü–æ–π–¥–µ–º —Å—Ç—Ä–æ–∏—Ç—å')
                            action_list.append(orders['castle_menu'])
                            action_list.append(build_target)
                            # if random.randint(0, 1) == 0:
                            # action_list.append(build_target)
                            # else:
                            # action_list.append('üèò–ü–æ—Å—Ç—Ä–æ–π–∫–∏')
                            # action_list.append('üöß–°—Ç—Ä–æ–π–∫–∞')
                            # action_list.append(build_target)

                elif build_enabled and castle_gold > 0 and level >= 10:
                    log('–ü–æ–π–¥–µ–º —Å—Ç—Ä–æ–∏—Ç—å')
                    action_list.append(orders['castle_menu'])
                    action_list.append(build_target)
                    # if random.randint(0, 1) == 0:
                    # action_list.append(build_target)
                    # else:
                    # action_list.append(orders['castle_menu'])
                    # action_list.append('üèò–ü–æ—Å—Ç—Ä–æ–π–∫–∏')
                    # action_list.append('üöß–°—Ç—Ä–æ–π–∫–∞')
                    # action_list.append(build_target)

                    # –≤–æ—é–µ–º –Ω–∞ –∞—Ä–µ–Ω–µ
        elif arena_enabled and text.find('–≤—ã–±–µ—Ä–∏ —Ç–æ—á–∫—É –∞—Ç–∞–∫–∏ –∏ —Ç–æ—á–∫—É –∑–∞—â–∏—Ç—ã') != -1:
            arena_running = True  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –∞—Ä–µ–Ω–∞ –∑–∞–ø—É—â–µ–Ω–∞ —Ä—É–∫–∞–º–∏
            lt_arena = time()
            lt_info = time()
            get_info_diff = random.randint(400, 500)
            attack_chosen = arena_attack[random.randint(0, 2)]
            cover_chosen = arena_cover[random.randint(0, 2)]
            log('–ê—Ç–∞–∫–∞: {0}, –ó–∞—â–∏—Ç–∞: {1}'.format(attack_chosen, cover_chosen))
            sleep(random.randint(2, 6))
            if random.randint(0, 1):
                action_list.append(attack_chosen)
                action_list.append(cover_chosen)
            else:
                action_list.append(cover_chosen)
                action_list.append(attack_chosen)

                # –í–µ—Ä–Ω—É–ª–∏—Å—å —Å –∫–≤–µ—Å—Ç–∞
        elif text.find('–ü–æ–ª—É—á–µ–Ω–æ:') != -1:
            fwd('@', stat_bot, message_id, sender)
            log('–£–¥–∞—á–Ω–æ –≤–µ—Ä–Ω—É–ª–∏—Å—å —Å –∫–≤–µ—Å—Ç–∞')

        # –ø–æ–±–µ–¥–∞ –Ω–∞ –∞—Ä–µ–Ω–µ
        elif text.find('–æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ') != -1 or text.find('–ù–∏—á—å—è') != -1:
            fwd('@', stat_bot, message_id, sender)
            lt_info = time()
            get_info_diff = random.randint(60, 120)
            log('–í—ã–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥ - –∞—Ä–µ–Ω–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å')
            arena_running = False
            if arena_change_enabled:
                action_list.append('/on_{0}'.format(non_arena_item_id))

                # –≤ –∫–≤–µ—Å—Ç–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –º–æ–±–∞
        elif quest_fight_enabled and text.find('/fight') != -1:
            log("–ü—Ä–æ—Å–∏–º –ø–æ–º–æ—â–∏ —É –æ—Ç—Ä—è–¥–∞")
            # TODO –æ—Ç–∫–ª—é—á–∞–µ–º, —á—Ç–æ–± –Ω–µ –∑–ª–∏—Ç—å —Å–æ–∫–ª–∞–Ω–æ–≤—Ü–µ–≤
            # fwd('@', stat_bot, message_id, sender)
            c = re.search('\/fight.*', text).group(0)
            action_list.append(c)
            fwd(pref, msg_receiver, message_id, sender)

        # –ó–∞–º–æ–∫
        elif text.find("–ö–∞–∑–Ω–∞ –∑–∞–º–∫–∞:") != -1:
            castle_gold = int(re.search('–ö–∞–∑–Ω–∞ –∑–∞–º–∫–∞:\n(\d+)', text).group(1))
            log("–ì–æ–ª–¥—ã –≤ –∑–∞–º–∫–µ = {0}".format(castle_gold))

            # else:
            #     log('WTF MSG ???')

            # elif username == 'ChatWarsCaptchaBot':
            #     if len(text) <= 4 and text in captcha_answers.values():
            #         sleep(3)
            #         action_list.append(text)
            #         bot_enabled = True

    # elif username == trade_bot and twinkstock_enabled and secondstock_enabled:
    #    if text.find('–¢–≤–æ–π —Å–∫–ª–∞–¥ —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏') != -1:
    #        stock_id = message_id
    #        fwd('@', stock_bot, stock_id, sender)
    #        twinkstock_enabled = False
    #        send_msg(pref, msg_receiver, '–°—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω')

    # elif username == trade_bot and len(resource_id_list) != 0 and trade_active == False:
    #    log('–¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø–æ —Å–ø–∏—Å–∫—É..')
    #    trade_active = True
    #    for res_id in resource_id_list:
    #        if re.search('\/add_' + res_id + ' ', text):
    #            count = re.search('/add_' + res_id + '\D+(.*)', text).group(1)
    #            send_msg('@', trade_bot, '/add_' + res_id + ' ' + str(count))
    #            log('–î–æ–±–∞–≤–∏–ª–∏ ' + str(count) + ' —à—Ç. —Ä–µ—Å—É—Ä—Å–∞ ' + res_id)
    #            send_msg(pref, msg_receiver, '–î–æ–±–∞–≤–ª–µ–Ω–æ ' + str(count) + ' —à—Ç. —Ä–µ—Å—É—Ä—Å–∞ ' + res_id)
    #            sleep_time = random.randint(2, 5)
    #            sleep(sleep_time)
    #        else:
    #            log('–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–∞ ' + res_id)
    #            send_msg(pref, msg_receiver, '–ù–∞ —Å–∫–ª–∞–¥–µ –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–∞ ' + res_id)
    #    resource_id_list = []
    #    send_msg('@', trade_bot, '/done')
    #    log('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ')
    #    trade_active = False
    #    send_msg(pref, msg_receiver, '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ ')

    else:
        if quest_fight_enabled and text.find('/fight') != -1 and level >= 15:
            c = re.search('\/fight.*', text).group(0)
            action_list.append(c)

        if bot_enabled and order_enabled and (username in order_usernames or username == admin_username):
            if text.startswith(orders['turtles']):
                update_order(orders['turtles'])
            elif text.startswith(orders['klever']):
                update_order(orders['klever'])
            elif text.startswith(orders['rock']):
                update_order(orders['rock'])
            elif text.startswith(orders['farm']):
                update_order(orders['farm'])
            elif text.startswith(orders['fall']):
                update_order(orders['fall'])
            elif text.startswith(orders['rose']):
                update_order(orders['rose'])
            elif text.startswith(orders['night']):
                update_order(orders['night'])
            elif text.startswith('üå≤'):
                update_order(orders['lesnoi_fort'])
            elif text.startswith('‚õ∞'):
                update_order(orders['gorni_fort'])
            elif text.startswith('‚öìÔ∏è'):
                update_order(orders['morskoi_fort'])
            elif text.startswith('üõ°'):
                update_order(castle)
            elif text.startswith(orders['attack_symbol']):
                c = re.search('^[‚öî].(..)', text).group(1)
                update_order(c)
                # send_msg(pref, msg_receiver, c)

        # send_msg(pref, admin_username, '–ü–æ–ª—É—á–∏–ª–∏ –∫–æ–º–∞–Ω–¥—É ' + current_order['order'] + ' –æ—Ç ' + username)
        if username == admin_username:
            if text == '#help':
                send_msg(pref, msg_receiver, '\n'.join([
                    '#enable_bot - –í–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞',
                    '#disable_bot - –í—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞',
                    '#enable_arena - –í–∫–ª—é—á–∏—Ç—å –∞—Ä–µ–Ω—É',
                    '#disable_arena - –í—ã–∫–ª—é—á–∏—Ç—å –∞—Ä–µ–Ω—É',
                    '#enable_les - –í–∫–ª—é—á–∏—Ç—å –ª–µ—Å',
                    '#disable_les - –í—ã–∫–ª—é—á–∏—Ç—å –ª–µ—Å',
                    '#enable_peshera - –í–∫–ª—é—á–∏—Ç—å –ø–µ—â–µ—Ä—ã',
                    '#disable_peshera - –í—ã–∫–ª—é—á–∏—Ç—å –ø–µ—â–µ—Ä—ã',
                    '#enable_more - –í–∫–ª—é—á–∏—Ç—å –ø–æ–±–µ—Ä–µ–∂—å–µ',
                    '#disable_more - –í—ã–∫–ª—é—á–∏—Ç—å –ø–æ–±–µ—Ä–µ–∂—å–µ',
                    '#enable_corovan - –í–∫–ª—é—á–∏—Ç—å –∫–æ—Ä–æ–≤–∞–Ω',
                    '#disable_corovan - –í—ã–∫–ª—é—á–∏—Ç—å –∫–æ—Ä–æ–≤–∞–Ω',
                    '#enable_order - –í–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–∫–∞–∑—ã',
                    '#disable_order - –í—ã–∫–ª—é—á–∏—Ç—å –ø—Ä–∏–∫–∞–∑—ã',
                    '#enable_auto_def - –í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ –¥–µ—Ñ',
                    '#disable_auto_def - –í—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ –¥–µ—Ñ',
                    '#enable_donate - –í–∫–ª—é—á–∏—Ç—å –¥–æ–Ω–∞—Ç',
                    '#disable_donate - –í—ã–∫–ª—é—á–∏—Ç—å –¥–æ–Ω–∞—Ç',
                    '#enable_quest_fight - –í–∫–ª—é—á–∏—Ç—å –±–∏—Ç–≤—É –≤–æ –≤—Ä–µ–º—è –∫–≤–µ—Å—Ç–æ–≤',
                    '#disable_quest_fight - –í—ã–∫–ª—é—á–∏—Ç—å –±–∏—Ç–≤—É –≤–æ –≤—Ä–µ–º—è –∫–≤–µ—Å—Ç–æ–≤',
                    '#enable_buy - –í–∫–ª—é—á–∏—Ç—å –¥–æ–Ω–∞—Ç –≤ –ª–∞–≤–∫—É –≤–º–µ—Å—Ç–æ –∫–∞–∑–Ω—ã',
                    '#disable_buy - –í—ã–ª—é—á–∏—Ç—å –¥–æ–Ω–∞—Ç –≤ –ª–∞–≤–∫—É –≤–º–µ—Å—Ç–æ –∫–∞–∑–Ω—ã',
                    '#set_arena_change *id –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–∞ –∞—Ä–µ–Ω–µ* *id –ø—Ä–µ–¥–º–µ—Ç–∞ –≤–Ω–µ –∞—Ä–µ–Ω—ã* - –í–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–æ–¥–µ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∞—Ä–µ–Ω–æ–π –∏ –ø–æ—Å–ª–µ –Ω–µ–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä —Ä–∞–ø–∏—Ä–∞ –∏ –∫–∏—Ä–∫–∞)',
                    '#disable_arena_change - –í—ã–∫–ª—é—á–∏—Ç—å –ø–µ—Ä–µ–æ–¥–µ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∞—Ä–µ–Ω–æ–π –∏ –ø–æ—Å–ª–µ –Ω–µ–µ',
                    "#lvl_atk - –∫–∞—á–∞—Ç—å –∞—Ç–∞–∫—É",
                    "#lvl_def - –∫–∞—á–∞—Ç—å –∑–∞—â–∏—Ç—É",
                    "#lvl_off - –Ω–∏—á–µ–≥–æ –Ω–µ –∫–∞—á–∞—Ç—å",
                    '#status - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å',
                    '#hero - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ—Ä–æ–µ',
                    '#push_order - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∫–∞–∑ ({0})'.format(','.join(orders)),
                    '#order - –î–µ–±–∞–≥, –ø–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞—â–∏—Ç—ã/–∞—Ç–∞–∫–∏ –∑–∞–º–∫–∞',
                    '#log - –î–µ–±–∞–≥, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ª–æ–≥–∞',
                    '#time - –î–µ–±–∞–≥, —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è',
                    '#lt_arena - –î–µ–±–∞–≥, –ø–æ—Å–ª–µ–¥–Ω—è—è –±–∏—Ç–≤–∞ –Ω–∞ –∞—Ä–µ–Ω–µ',
                    '#get_info_diff - –î–µ–±–∞–≥, –ø–æ—Å–ª–µ–¥–Ω—è—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–µ—Ä–æ–µ',
                    '#ping - –î–µ–±–∞–≥, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∂–∏–≤ –ª–∏ –±–æ—Ç',
                    '#enable_build - –í–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏',
                    '#disable_build - –í—ã–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏',
                    '#build_target - —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏/–ø–æ—á–∏–Ω–∫–∏ ({0})'.format(','.join(builds)),
                    '#stock - –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–∫–∏',
                    '#info - –ù–µ–º–Ω–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏',
                    '#detail - –ü–æ—á—Ç–∏ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ—Ä–æ–µ, —Ç–æ–ª—å–∫–æ –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ',
                    '#report - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç —Å –ø—Ä–æ—à–ª–æ–π –±–∏—Ç–≤—ã',
                    '#enable_first_stock - –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–æ–∫–∞ –≤ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–∫–±–æ—Ç–∞(Penguindum)',
                    '#disable_first_stock - –í—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–æ–∫–∞ –≤ –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–∫–±–æ—Ç–∞(Penguindum)',
                    '#enable_second_stock - –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–æ–∫–∞ –≤–æ –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–∫–±–æ—Ç–∞(–ö–∞–ø–∏–±–∞—Ä–∞-–±–∞–Ω–∫–∏—Ä)',
                    '#disable_second_stock - –í—ã–∫–ª—é—á–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç–æ–∫–∞ –≤–æ –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–∫–±–æ—Ç–∞(–ö–∞–ø–∏–±–∞—Ä–∞-–±–∞–Ω–∫–∏—Ä)',
                    '#report - –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–ø–æ—Ä—Ç —Å –ø—Ä–æ—à–ª–æ–π –±–∏—Ç–≤—ã',
                    '#eval - –î–µ–±–∞–≥, –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤—Ä—É—á–Ω—É—é'
                ]))

            # –æ—Ç–ø—Ä–∞–≤–∫–∞ info
            elif text == '#info':
                infotext = 'üïØ' if class_available else ''
                infotext += '{0}{1}, üí∞{2}, üîã{3}/{4}'.format(castle, level, gold, endurance, endurancetop)
                if arenafight.group(2) != '0':
                    infotext += ', ü§∫{0}/{1}, üåü{2}'.format(arenafight.group(1), arenafight.group(2), victory)
                send_msg(pref, msg_receiver, infotext)

            # –í–∫–ª/–≤—ã–∫–ª –±–æ—Ç–∞
            elif text == '#enable_bot':
                bot_enabled = True
                write_config()
                send_msg(pref, msg_receiver, '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω')
            elif text == '#disable_bot':
                bot_enabled = False
                write_config()
                send_msg(pref, msg_receiver, '–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω')

            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–æ–∫–∞
            # elif text == '#stock':
            #    if level >= 15:
            #        if secondstock_enabled:
            #            twinkstock_enabled = True
            #            send_msg('@', trade_bot, '/start')
            #        else:
            #            send_msg(pref, msg_receiver,
            #                     '–¢—ã –ø—Ä–æ—Å–∏—à—å –º–µ–Ω—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–∫. –ù–æ —Ç—ã –¥–∞–∂–µ –Ω–µ –≤–∫–ª—é—á–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—Ç–æ–∫–±–æ—Ç–∞.')
            #    else:
            #       send_msg(pref, msg_receiver, '–Ø –µ—â–µ –Ω–µ –¥–æ—Ä–æ—Å, —É –º–µ–Ω—è —Ç–æ–ª—å–∫–æ ' + str(level) + ' —É—Ä–æ–≤–µ–Ω—å')

            # –í–∫–ª/–≤—ã–∫–ª –∞—Ä–µ–Ω—ã
            elif text == '#enable_arena':
                arena_enabled = True
                write_config()
                lt_info = time()
                get_info_diff = random.randint(400, 500)
                if level >= 5:
                    send_msg(pref, msg_receiver, '–ê—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞')
                    log('–ê—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞, —Å–∫–æ—Ä–æ –ø–æ–π–¥–µ–º –±–∏—Ç—å –º–æ—Ä–¥—ã')
                else:
                    send_msg(pref, msg_receiver, '–ê—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞, –Ω–æ —É –º–µ–Ω—è —Ç–æ–ª—å–∫–æ {0} —É—Ä–æ–≤–µ–Ω—å'.format(level))
                    log('–ê—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞, —Å–∫–æ—Ä–æ –ø–æ–π–¥–µ–º –±–∏—Ç—å –º–æ—Ä–¥—ã, –Ω–æ —É –º–µ–Ω—è —Ç–æ–ª—å–∫–æ {0} —É—Ä–æ–≤–µ–Ω—å'.format(level))
            elif text == '#disable_arena':
                arena_enabled = False
                write_config()
                send_msg(pref, msg_receiver, '–ê—Ä–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–∞')

            # –í–∫–ª/–≤—ã–∫–ª –ª–µ—Å–∞
            elif text == '#enable_les':
                les_enabled = True
                write_config()
                send_msg(pref, msg_receiver, '–õ–µ—Å —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω')
            elif text == '#disable_les':
                les_enabled = False
                write_config()
                send_msg(pref, msg_receiver, '–õ–µ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω')

            # –í–∫–ª/–≤—ã–∫–ª –ø–µ—â–µ—Ä—ã
            elif text == '#enable_peshera':
                peshera_enabled = True
                write_config()
                send_msg(pref, msg_receiver, '–ü–µ—â–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω—ã')
            elif text == '#disable_peshera':
                peshera_enabled = False
                write_config()
                send_msg(pref, msg_receiver, '–ü–µ—â–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω—ã')

            # –í–∫–ª/–≤—ã–∫–ª –ø–æ–±–µ—Ä–µ–∂—å–µ
            elif text == '#enable_more':
                more_enabled = True
                write_config()
                send_msg(pref, msg_receiver, '–ü–æ–±–µ—Ä–µ–∂—å–µ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ')
            elif text == '#disable_more':
                more_enabled = False
                write_config()
                send_msg(pref, msg_receiver, '–ü–æ–±–µ—Ä–µ–∂—å–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–æ')

            # –í–∫–ª/–≤—ã–∫–ª –∫–æ—Ä–æ–≤–∞–Ω–∞
            elif text == '#enable_corovan':
                corovan_enabled = True
                write_config()
                send_msg(pref, msg_receiver, '–ö–æ—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω—ã')
            elif text == '#disable_corovan':
                corovan_enabled = False
                write_config()
                send_msg(pref, msg_receiver, '–ö–æ—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω—ã')

            # –í–∫–ª/–≤—ã–∫–ª –∫–æ–º–∞–Ω–¥
            elif text == '#enable_order':
                order_enabled = True
                send_msg(pref, msg_receiver, '–ü—Ä–∏–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω—ã')
            elif text == '#disable_order':
                order_enabled = False
                send_msg(pref, msg_receiver, '–ü—Ä–∏–∫–∞–∑—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω—ã')

            # –í–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ –¥–µ—Ñ
            elif text == '#enable_auto_def':
                auto_def_enabled = True
                write_config()
                send_msg(pref, msg_receiver, '–ê–≤—Ç–æ –¥–µ—Ñ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω')
            elif text == '#disable_auto_def':
                auto_def_enabled = False
                write_config()
                send_msg(pref, msg_receiver, '–ê–≤—Ç–æ –¥–µ—Ñ —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω')

            # –í–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ –¥–æ–Ω–∞—Ç
            elif text == '#enable_donate':
                donate_enabled = True
                write_config()
                send_msg(pref, msg_receiver, '–î–æ–Ω–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω')
            elif text == '#disable_donate':
                donate_enabled = False
                write_config()
                send_msg(pref, msg_receiver, '–î–æ–Ω–∞—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω')

            # –í–∫–ª/–≤—ã–∫–ª –ø–µ—Ä–µ–æ–¥–µ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∞—Ä–µ–Ω–æ–π –∏ –ø–æ—Å–ª–µ –Ω–µ–µ
            elif text.startswith('#set_arena_change'):
                arena_change_enabled = True
                arena_item_id = text.split(' ')[1]
                non_arena_item_id = text.split(' ')[2]
                write_config()
                send_msg(pref, msg_receiver,
                         '–ü–µ—Ä–µ–æ–¥–µ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∞—Ä–µ–Ω–æ–π –∏ –ø–æ—Å–ª–µ –Ω–µ–µ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ. –ù–∞ –∞—Ä–µ–Ω–µ - {0}, –≤–Ω–µ –∞—Ä–µ–Ω—ã - {1}'.format(
                             arena_item_id, non_arena_item_id))
            elif text == '#disable_arena_change':
                arena_change_enabled = False
                write_config()
                send_msg(pref, msg_receiver, '–ü–µ—Ä–µ–æ–¥–µ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –∞—Ä–µ–Ω–æ–π –∏ –ø–æ—Å–ª–µ –Ω–µ–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–æ')

            # –í–∫–ª/–≤—ã–∫–ª –±–∏—Ç–≤—É –ø–æ –≤—Ä–µ–º—è –∫–≤–µ—Å—Ç–∞
            elif text == '#enable_quest_fight':
                quest_fight_enabled = True
                write_config()
                send_msg(pref, msg_receiver, '–ë–∏—Ç–≤–∞ –≤–∫–ª—é—á–µ–Ω–∞')
            elif text == '#disable_quest_fight':
                quest_fight_enabled = False
                write_config()
                send_msg(pref, msg_receiver, '–ë–∏—Ç–≤–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞')

            # —á—Ç–æ –∫–∞—á–∞—Ç—å –ø—Ä–∏ –ª–µ–≤–µ–ª–∞–ø–µ
            elif text == '#lvl_atk':
                lvl_up = 'lvl_atk'
                write_config()
                send_msg(pref, msg_receiver, '–ö–∞—á–∞–µ–º –∞—Ç–∞–∫—É')
            elif text == '#lvl_def':
                lvl_up = 'lvl_def'
                write_config()
                send_msg(pref, msg_receiver, '–ö–∞—á–∞–µ–º –∑–∞—â–∏—Ç—É')
            elif text == '#lvl_off':
                lvl_up = 'lvl_off'
                write_config()
                send_msg(pref, msg_receiver, '–ù–µ –∫–∞—á–∞–µ–º –Ω–∏—á–µ–≥–æ')

            # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            elif text == '#status':
                send_msg(pref, msg_receiver, '\n'.join([
                    'ü§ñ–ë–æ—Ç –≤–∫–ª—é—á–µ–Ω: {0}',
                    'ü§∫–ê—Ä–µ–Ω–∞ –≤–∫–ª—é—á–µ–Ω–∞: {1}',
                    'ü§∫–°–µ–π—á–∞—Å –Ω–∞ –∞—Ä–µ–Ω–µ: {2}',
                    'üå≥–õ–µ—Å –≤–∫–ª—é—á–µ–Ω: {3}',
                    'üï∏–ü–µ—â–µ—Ä—ã –≤–∫–ª—é—á–µ–Ω—ã: {4}',
                    'üèù–ü–æ–±–µ—Ä–µ–∂—å–µ –≤–∫–ª—é—á–µ–Ω–æ: {5}',
                    'üê´–ö–æ—Ä–æ–≤–∞–Ω—ã –≤–∫–ª—é—á–µ–Ω—ã: {6}',
                    '‚öî–ü—Ä–∏–∫–∞–∑—ã –≤–∫–ª—é—á–µ–Ω—ã: {7}',
                    '‚úù–ê–≤—Ç–æ –¥–µ—Ñ –≤–∫–ª—é—á–µ–Ω: {8}',
                    'üí∞–î–æ–Ω–∞—Ç –≤–∫–ª—é—á–µ–Ω: {9}',
                    'üåü–õ–µ–≤–µ–ª–∞–ø: {10}',
                    'üèò–ü–æ—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞: {11}',
                    'üöß–¶–µ–ª—å –ø–æ—Å—Ç—Ä–æ–π–∫–∏: {12}',
                ]).format(bot_enabled, arena_enabled, arena_running, les_enabled, peshera_enabled, more_enabled,
                          corovan_enabled, order_enabled,
                          auto_def_enabled, donate_enabled, orders[lvl_up], build_enabled, build_target))

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ—Ä–æ–µ
            elif text == '#hero':
                if hero_message_id == 0:
                    send_msg(pref, msg_receiver, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ—Ä–æ–µ –ø–æ–∫–∞ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
                else:
                    fwd(pref, msg_receiver, hero_message_id['id'], sender)

            # —Ä–µ–ø–æ—Ä—Ç –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±–æ—è
            elif text == '#report':
                if report_message_id == 0:
                    send_msg(pref, msg_receiver, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–æ—Ä—Ç–µ –ø–æ–∫–∞ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
                else:
                    fwd(pref, msg_receiver, report_message_id, sender)

            # TODO –¥–æ–ø–∏–ª–∏—Ç—å. –ø–æ –∏–¥ –∏–≤–µ–Ω—Ç–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            elif text == '#detail':
                if hero_message_id == 0:
                    send_msg(pref, msg_receiver, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ—Ä–æ–µ –ø–æ–∫–∞ –µ—â–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')
                else:
                    # heroText = sender.message_get(hero_message_id['text']).text
                    template = '{0}{1} {2}, üèÖ{3}, ‚öîÔ∏è{4} üõ°{5}\nüî•{6}/{7} üîã{8}/{9} üí∞{10}\nüéΩ{11}'
                    heroName = re.search('.{2}(.*), (\w+) \w+ –∑–∞–º–∫–∞', hero_message_id['text']).group(1)
                    heroClass = re.search('.{2}(.*), (\w+) \w+ –∑–∞–º–∫–∞', hero_message_id['text']).group(2)
                    heroAtk = re.search('‚öî–ê—Ç–∞–∫–∞: (\d+) üõ°–ó–∞—â–∏—Ç–∞: (\d+)', hero_message_id['text']).group(1)
                    heroDef = re.search('‚öî–ê—Ç–∞–∫–∞: (\d+) üõ°–ó–∞—â–∏—Ç–∞: (\d+)', hero_message_id['text']).group(2)
                    heroExpNow = re.search('üî•–û–ø—ã—Ç: (\d+)/(\d+)', hero_message_id['text']).group(1)
                    heroExpNext = re.search('üî•–û–ø—ã—Ç: (\d+)/(\d+)', hero_message_id['text']).group(2)
                    heroEquip = re.sub('\+', '', re.search('üéΩ–≠–∫–∏–ø–∏—Ä–æ–≤–∫–∞ (.+)', hero_message_id['text']).group(1))
                    # heroState = re.search('–°–æ—Å—Ç–æ—è–Ω–∏–µ:\n(.+)', heroText).group(1)
                    send_msg(pref, msg_receiver,
                             template.format(castle, heroClass, heroName, level, heroAtk, heroDef, heroExpNow,
                                             heroExpNext, endurance, endurancetop, gold, heroEquip))

            # –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥
            elif text == '#log':
                send_msg(pref, msg_receiver, '\n'.join(log_list))
                log_list.clear()
                log('–õ–æ–≥ –∑–∞–ø—Ä–æ—à–µ–Ω –∏ –æ—á–∏—â–µ–Ω')

            elif text == '#lt_arena':
                send_msg(pref, msg_receiver, str(lt_arena))

            elif text == '#order':
                text_date = datetime.fromtimestamp(current_order['time']).strftime('%Y-%m-%d %H:%M:%S')
                send_msg(pref, msg_receiver, current_order['order'] + ' ' + text_date)

            elif text == '#time':
                text_date = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                send_msg(pref, msg_receiver, text_date)

            elif text == '#ping':
                send_msg(pref, msg_receiver, '#pong')

            elif text == '#get_info_diff':
                send_msg(pref, msg_receiver, str(get_info_diff))

            elif text.startswith('#push_order'):
                command = text.split(' ')[1]
                if command in orders:
                    update_order(orders[command])
                    send_msg(pref, msg_receiver, '–ö–æ–º–∞–Ω–¥–∞ ' + command + ' –ø—Ä–∏–º–µ–Ω–µ–Ω–∞')
                else:
                    send_msg(pref, msg_receiver, '–ö–æ–º–∞–Ω–¥–∞ ' + command + ' –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞')

            elif text.startswith('#build_target'):
                command = text.split(' ')[1]
                if command in builds:
                    build_target = builds[command]
                    send_msg(pref, msg_receiver, '–ü–æ—Å—Ç—Ä–æ–π–∫–∞ ' + builds[command] + ' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')
                    write_config()
                else:
                    send_msg(pref, msg_receiver, '–ü–æ—Å—Ç—Ä–æ–π–∫–∞ ' + command + ' –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞')

            # elif text.startswith('#captcha'):
            #     command = text.split(' ')[1]
            #     if command in captcha_answers:
            #         action_list.append(captcha_answers[command])
            #         bot_enabled = True
            #         send_msg('@', admin_username, '–ö–æ–º–∞–Ω–¥–∞ ' + command + ' –ø—Ä–∏–º–µ–Ω–µ–Ω–∞')
            #     else:
            #         send_msg('@', admin_username, '–ö–æ–º–∞–Ω–¥–∞ ' + command + ' –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞')

            # –í–∫–ª/–≤—ã–∫–ª –ø–æ—Å—Ç—Ä–æ–µ–∫
            elif text == '#enable_build':
                build_enabled = True
                write_config()
                lt_info = time()
                get_info_diff = random.randint(400, 500)
                send_msg(pref, msg_receiver, '–ü–æ—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞')
                log('–ü–æ—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞, —Å–∫–æ—Ä–æ –ø–æ–π–¥–µ–º —Å—Ç—Ä–æ–∏—Ç—å')
            elif text == '#disable_build':
                build_enabled = False
                write_config()
                send_msg(pref, msg_receiver, '–ü–æ—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω–∞')

            # elif text.startswith('#add'):
            #    if level >= 15:
            #        resource_id_list = text.split(' ')[1].split(',')
            #        send_msg('@', trade_bot, '/start')
            #    else:
            #        send_msg(pref, msg_receiver, '–Ø –µ—â–µ –Ω–µ –¥–æ—Ä–æ—Å, —É –º–µ–Ω—è —Ç–æ–ª—å–∫–æ ' + str(level) + ' —É—Ä–æ–≤–µ–Ω—å')

            # –í–∫–ª/–≤—ã–∫–ª –ø–µ—Ä–≤–æ–≥–æ —Å—Ç–æ–∫–æ–±–æ—Ç–∞
            # elif text == '#enable_first_stock':
            #     firststock_enabled = True
            #     write_config()
            #     send_msg(pref, msg_receiver, '–ü–µ—Ä–≤—ã–π —Å—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á—ë–Ω')
            # elif text == '#disable_first_stock':
            #     firststock_enabled = False
            #     write_config()
            #     send_msg(pref, msg_receiver, '–ü–µ—Ä–≤—ã–π —Å—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω')

            # –í–∫–ª/–≤—ã–∫–ª –≤—Ç–æ—Ä–æ–≥–æ —Å—Ç–æ–∫–æ–±–æ—Ç–∞
            elif text == '#enable_stock':
                secondstock_enabled = True
                write_config()
                send_msg(pref, msg_receiver, 'C—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á—ë–Ω')
            elif text == '#disable_stock':
                secondstock_enabled = False
                write_config()
                send_msg(pref, msg_receiver, 'C—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –≤—ã–∫–ª—é—á–µ–Ω')

            elif text.startswith('#eval'):
                eval(re.search('#eval (.+)', text).group(1))


def send_msg(pref, to, message):
    client.send_message(to, message)


def fwd(pref, to, message_id, sender):
    client.forward_messages(to, message_id, from_peer=sender)


def update_order(order):
    client.send_message(bot_username, order)
    current_order['order'] = order
    current_order['time'] = time()
    sleep(1)
    if order == castle:
        action_list.append(orders['cover'])
    else:
        action_list.append(orders['attack'])
        action_list.append(order)
    # action_list.append(orders['hero'])


def log(text):
    message = '{0:%Y-%m-%d %H:%M:%S}'.format(datetime.now()) + ' ' + text
    print(message)
    log_list.append(message)


# TODO –≤—ã–Ω–µ—Å—Ç–∏ –≤—Å–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –º–µ–π–Ω
if __name__ == '__main__':
    while True:
        try:
            connect(CONFIG['USERNAME'], CONFIG['API_ID'], CONFIG['API_HASH'])
            @client.on(events.NewMessage(incoming=True))
            def work_with_messages(msg):
                global my_username
                global need2readconfig
                try:
                    if need2readconfig and msg.sender.username == bot_username:
                        print(client.get_me().username)
                        need2readconfig = False
                        my_username = client.get_me().username  # –±—ã–ª–æ msg.message.to_id.user_id
                        log('username = {0}'.format(my_username))
                        config.read(configpath + str(my_username) + '.cfg')
                        if config.has_section(str(my_username)):
                            log('–ö–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω')
                            read_config()
                            log('–ö–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω')
                        else:
                            log('–ö–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω')
                            write_config()
                            log('–ù–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥-—Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω')
                    if "username" in dir(msg.sender):
                        parse_text(msg.raw_text, msg.sender.username, msg.message.id, msg.sender.id)
                except Exception as err:
                    log('EXCEPTION: {0}'.format(err))
                raise telethon.events.StopPropagation
            _thread.start_new_thread(queue_worker, ())
            client.idle()
        except Exception as err:
            log("RECONNECTING!!!")
            sleep(3)
            # client._reconnect()
    log('Disconnecting...')
    client.disconnect()